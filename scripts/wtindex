#!python
"""
Administration program for wormtable indexes. 
"""
from __future__ import print_function
from __future__ import division 

import sys
import time

import wormtable

class ProgressMonitor(object):
    """
    Class representing a progress monitor for a terminal based interface.
    """
    def __init__(self, total):
        self.__total = total
        self.__progress_width = 40
        self.__bar_index = 0
        self.__bars = "/-\\|"
        self.__start_time = time.clock()

    def update(self, processed):
        """
        Updates this progress monitor to display the specified number 
        of processed items.
        """
        complete = processed / self.__total
        filled = int(complete * self.__progress_width)
        spaces = self.__progress_width - filled 
        bar = self.__bars[self.__bar_index]
        self.__bar_index = (self.__bar_index + 1) % len(self.__bars)
        elapsed = time.clock() - self.__start_time
        rate = processed / elapsed
        s = '\r[{0}{1}] {2:2.2f}% @{3:4.2G} rows/s {4}'.format('#' * filled, 
            ' ' * spaces, complete * 100, rate, bar)
        print(s, end="")
    
    def finish(self):
        """
        Completes the progress monitor.
        """
        print()

def build_index(homedir, column_names):
    print("building index for ", homedir, " on ", column_names)
    cache_size = 1 * 2**30
    table = wormtable.Table(homedir, cache_size)
    schema = table.get_schema()
    columns = [schema.get_column(name.encode()) for name in column_names] 
    cache_size = 8 * 2**30
    index = wormtable.Index(table, columns, cache_size)
    n = table.get_num_rows()
    monitor = ProgressMonitor(n)
    def progress(processed_rows):
        monitor.update(processed_rows)
    index.build(progress, max(1, int(n / 1000)))
    monitor.finish()


def main():
    build_index(sys.argv[1], sys.argv[2:])    

if __name__ == main():
    main()
