#!python
"""
Administration program for wormtable indexes. 
"""
from __future__ import print_function
from __future__ import division 

import sys
import optparse

import wormtable as wt
   
def main():
    usage = "usage: %prog [options] build homedir column1 [column2 ... ]"
    parser = optparse.OptionParser(usage=usage) 
    parser.add_option("-f", "--force", dest="force",
            action="store_true", default=False,
            help="overwrite existing index", metavar="FORCE")
    parser.add_option("-w", "--write-cache-size", dest="write_cache_size",
            help="write cache size in K, M or G", default="64M")
    parser.add_option("-r", "--read-cache-size", dest="read_cache_size",
            help="read cache size in K, M or G", default="64M")
    (options, args) = parser.parse_args()
    read_cache_size = wt.parse_cache_size(options.read_cache_size)
    write_cache_size = wt.parse_cache_size(options.write_cache_size)
    if len(args) < 1:
        parser.error("command not supplied")
    command = args[0]
    if command == "build":
        if len(args) < 3:
            parser.error("Incorrect number of arguments")
        homedir = args[1]
        column_names = args[2:]
        table = wt.Table(homedir, read_cache_size)
        schema = table.get_schema()
        columns = [schema.get_column(name.encode()) for name in column_names] 
        cache_size = 8 * 2**30
        index = wt.Index(table, columns, cache_size)
        n = table.get_num_rows()
        monitor = wt.ProgressMonitor(n)
        def progress(processed_rows):
            monitor.update(processed_rows)
        index.build(progress, max(1, int(n / 1000)))
        monitor.finish()
    else:   
        parser.error("command not supported")


if __name__ == main():
    main()
