#!python
"""
Administration program for wormtable indexes. 
"""
from __future__ import print_function
from __future__ import division 

import re
import sys
import optparse

import wormtable as wt
   
def main():
    usage = "usage: %prog [options] build homedir column1 [column2 ... ]"
    parser = optparse.OptionParser(usage=usage) 
    parser.add_option("-f", "--force", dest="force",
            action="store_true", default=False,
            help="overwrite existing index", metavar="FORCE")
    parser.add_option("-p", "--progress", dest="progress",
            action="store_true", default=False,
            help="show progress monitor", metavar="PROGRESS")
    parser.add_option("-w", "--write-cache-size", dest="write_cache_size",
            help="write cache size in K, M or G", default="64M")
    parser.add_option("-r", "--read-cache-size", dest="read_cache_size",
            help="read cache size in K, M or G", default="64M")
    (options, args) = parser.parse_args()
    read_cache_size = wt.parse_cache_size(options.read_cache_size)
    write_cache_size = wt.parse_cache_size(options.write_cache_size)
    if len(args) < 1:
        parser.error("command not supplied")
    command = args[0]
    if command == "build":
        if len(args) < 3:
            parser.error("Incorrect number of arguments")
        homedir = args[1]
        column_names = []
        bin_widths = []
        for c in args[2:]:
            col_name = c
            bin_width = 0
            m = re.search("\[.*\]$", c)
            if m is not None:
                g = m.group(0)
                col_name = c[:m.start(0)]
                bin_width = float(g.strip("[]"))
            bin_widths.append(bin_width)
            column_names.append(col_name)
        table = wt.Table(homedir, read_cache_size)
        index = wt.Index(table, column_names, write_cache_size)
        n = table.get_num_rows()
        f = None
        if options.progress: 
            monitor = wt.ProgressMonitor(n, "rows")
            def progress(processed_rows):
                monitor.update(processed_rows)
            f = progress
        index.set_bin_widths(bin_widths)
        index.build(f, max(1, int(n / 1000)))
        if options.progress:
            monitor.finish()
    else:   
        parser.error("command not supported")


if __name__ == main():
    main()
